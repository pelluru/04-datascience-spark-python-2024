# This file is automatically generated. See `src/frontend/planner_test/README.md` for more information.
- id: create_table
  sql: |
    create table t1 (c1 INT, c2 INT, c3 INT);
- id: basic_optimization_pattern
  before:
  - create_table
  sql: |
    select
      case c1
        when 1 then 'one'
        when 2 then 'two'
        when 3 then 'three'
        when 4 then 'four'
        when 5 then 'five'
        when 6 then 'six'
        when 7 then 'seven'
        when 8 then 'eight'
        when 9 then 'nine'
        when 10 then 'ten'
        when 11 then 'eleven'
        when 12 then 'twelve'
        when 13 then 'thirteen'
        when 14 then 'fourteen'
        when 15 then 'fifteen'
        when 16 then 'sixteen'
        when 17 then 'seventeen'
        when 18 then 'eighteen'
        when 19 then 'nineteen'
        when 20 then 'twenty'
        when 21 then 'twenty-one'
        when 22 then 'twenty-two'
        when 23 then 'twenty-three'
        when 24 then 'twenty-four'
        when 25 then 'twenty-five'
        when 26 then 'twenty-six'
        when 27 then 'twenty-seven'
        when 28 then 'twenty-eight'
        when 29 then 'twenty-nine'
        when 30 then 'thirty'
        when 31 then 'thirty-one'
        when 32 then 'thirty-two'
        when 33 then 'thirty-three'
        when 34 then 'thirty-four'
        when 35 then 'thirty-five'
        when 36 then 'thirty-six'
        when 37 then 'thirty-seven'
        when 38 then 'thirty-eight'
        when 39 then 'thirty-nine'
        when 40 then 'forty'
        when 41 then 'forty-one'
        when 42 then 'forty-two'
        when 43 then 'forty-three'
        when 44 then 'forty-four'
        when 45 then 'forty-five'
        when 46 then 'forty-six'
        when 47 then 'forty-seven'
        when 48 then 'forty-eight'
        when 49 then 'forty-nine'
        when 50 then 'fifty'
        when 51 then 'fifty-one'
        when 52 then 'fifty-two'
        when 53 then 'fifty-three'
        when 54 then 'fifty-four'
        when 55 then 'fifty-five'
        when 56 then 'fifty-six'
        when 57 then 'fifty-seven'
        when 58 then 'fifty-eight'
        when 59 then 'fifty-nine'
        when 60 then 'sixty'
        when 61 then 'sixty-one'
        when 62 then 'sixty-two'
        when 63 then 'sixty-three'
        when 64 then 'sixty-four'
        when 65 then 'sixty-five'
        when 66 then 'sixty-six'
        when 67 then 'sixty-seven'
        when 68 then 'sixty-eight'
        when 69 then 'sixty-nine'
        when 70 then 'seventy'
        when 71 then 'seventy-one'
        when 72 then 'seventy-two'
        when 73 then 'seventy-three'
        when 74 then 'seventy-four'
        when 75 then 'seventy-five'
        when 76 then 'seventy-six'
        when 77 then 'seventy-seven'
        when 78 then 'seventy-eight'
        when 79 then 'seventy-nine'
        when 80 then 'eighty'
        when 81 then 'eighty-one'
        when 82 then 'eighty-two'
        when 83 then 'eighty-three'
        when 84 then 'eighty-four'
        when 85 then 'eighty-five'
        when 86 then 'eighty-six'
        when 87 then 'eighty-seven'
        when 88 then 'eighty-eight'
        when 89 then 'eighty-nine'
        when 90 then 'ninety'
        when 91 then 'ninety-one'
        when 92 then 'ninety-two'
        when 93 then 'ninety-three'
        when 94 then 'ninety-four'
        when 95 then 'ninety-five'
        when 96 then 'ninety-six'
        when 97 then 'ninety-seven'
        when 98 then 'ninety-eight'
        when 99 then 'ninety-nine'
        when 100 then 'one hundred'
      else
        '114514'
      end
    from t1;
  logical_plan: |-
    LogicalProject
    ├─exprs: ConstantLookup(t1.c1, 1:Int32, 'one':Varchar, 2:Int32, 'two':Varchar, 3:Int32, 'three':Varchar, 4:Int32, 'four':Varchar, 5:Int32, 'five':Varchar, 6:Int32, 'six':Varchar, 7:Int32, 'seven':Varchar, 8:Int32, 'eight':Varchar, 9:Int32, 'nine':Varchar, 10:Int32, 'ten':Varchar, 11:Int32, 'eleven':Varchar, 12:Int32, 'twelve':Varchar, 13:Int32, 'thirteen':Varchar, 14:Int32, 'fourteen':Varchar, 15:Int32, 'fifteen':Varchar, 16:Int32, 'sixteen':Varchar, 17:Int32, 'seventeen':Varchar, 18:Int32, 'eighteen':Varchar, 19:Int32, 'nineteen':Varchar, 20:Int32, 'twenty':Varchar, 21:Int32, 'twenty-one':Varchar, 22:Int32, 'twenty-two':Varchar, 23:Int32, 'twenty-three':Varchar, 24:Int32, 'twenty-four':Varchar, 25:Int32, 'twenty-five':Varchar, 26:Int32, 'twenty-six':Varchar, 27:Int32, 'twenty-seven':Varchar, 28:Int32, 'twenty-eight':Varchar, 29:Int32, 'twenty-nine':Varchar, 30:Int32, 'thirty':Varchar, 31:Int32, 'thirty-one':Varchar, 32:Int32, 'thirty-two':Varchar, 33:Int32, 'thirty-three':Varchar, 34:Int32, 'thirty-four':Varchar, 35:Int32, 'thirty-five':Varchar, 36:Int32, 'thirty-six':Varchar, 37:Int32, 'thirty-seven':Varchar, 38:Int32, 'thirty-eight':Varchar, 39:Int32, 'thirty-nine':Varchar, 40:Int32, 'forty':Varchar, 41:Int32, 'forty-one':Varchar, 42:Int32, 'forty-two':Varchar, 43:Int32, 'forty-three':Varchar, 44:Int32, 'forty-four':Varchar, 45:Int32, 'forty-five':Varchar, 46:Int32, 'forty-six':Varchar, 47:Int32, 'forty-seven':Varchar, 48:Int32, 'forty-eight':Varchar, 49:Int32, 'forty-nine':Varchar, 50:Int32, 'fifty':Varchar, 51:Int32, 'fifty-one':Varchar, 52:Int32, 'fifty-two':Varchar, 53:Int32, 'fifty-three':Varchar, 54:Int32, 'fifty-four':Varchar, 55:Int32, 'fifty-five':Varchar, 56:Int32, 'fifty-six':Varchar, 57:Int32, 'fifty-seven':Varchar, 58:Int32, 'fifty-eight':Varchar, 59:Int32, 'fifty-nine':Varchar, 60:Int32, 'sixty':Varchar, 61:Int32, 'sixty-one':Varchar, 62:Int32, 'sixty-two':Varchar, 63:Int32, 'sixty-three':Varchar, 64:Int32, 'sixty-four':Varchar, 65:Int32, 'sixty-five':Varchar, 66:Int32, 'sixty-six':Varchar, 67:Int32, 'sixty-seven':Varchar, 68:Int32, 'sixty-eight':Varchar, 69:Int32, 'sixty-nine':Varchar, 70:Int32, 'seventy':Varchar, 71:Int32, 'seventy-one':Varchar, 72:Int32, 'seventy-two':Varchar, 73:Int32, 'seventy-three':Varchar, 74:Int32, 'seventy-four':Varchar, 75:Int32, 'seventy-five':Varchar, 76:Int32, 'seventy-six':Varchar, 77:Int32, 'seventy-seven':Varchar, 78:Int32, 'seventy-eight':Varchar, 79:Int32, 'seventy-nine':Varchar, 80:Int32, 'eighty':Varchar, 81:Int32, 'eighty-one':Varchar, 82:Int32, 'eighty-two':Varchar, 83:Int32, 'eighty-three':Varchar, 84:Int32, 'eighty-four':Varchar, 85:Int32, 'eighty-five':Varchar, 86:Int32, 'eighty-six':Varchar, 87:Int32, 'eighty-seven':Varchar, 88:Int32, 'eighty-eight':Varchar, 89:Int32, 'eighty-nine':Varchar, 90:Int32, 'ninety':Varchar, 91:Int32, 'ninety-one':Varchar, 92:Int32, 'ninety-two':Varchar, 93:Int32, 'ninety-three':Varchar, 94:Int32, 'ninety-four':Varchar, 95:Int32, 'ninety-five':Varchar, 96:Int32, 'ninety-six':Varchar, 97:Int32, 'ninety-seven':Varchar, 98:Int32, 'ninety-eight':Varchar, 99:Int32, 'ninety-nine':Varchar, 100:Int32, 'one hundred':Varchar, '114514':Varchar) as $expr1
    └─LogicalScan { table: t1, columns: [t1.c1, t1.c2, t1.c3, t1._row_id, t1._rw_timestamp] }
  batch_plan: |-
    BatchExchange { order: [], dist: Single }
    └─BatchProject
      ├─exprs: ConstantLookup(t1.c1, 1:Int32, 'one':Varchar, 2:Int32, 'two':Varchar, 3:Int32, 'three':Varchar, 4:Int32, 'four':Varchar, 5:Int32, 'five':Varchar, 6:Int32, 'six':Varchar, 7:Int32, 'seven':Varchar, 8:Int32, 'eight':Varchar, 9:Int32, 'nine':Varchar, 10:Int32, 'ten':Varchar, 11:Int32, 'eleven':Varchar, 12:Int32, 'twelve':Varchar, 13:Int32, 'thirteen':Varchar, 14:Int32, 'fourteen':Varchar, 15:Int32, 'fifteen':Varchar, 16:Int32, 'sixteen':Varchar, 17:Int32, 'seventeen':Varchar, 18:Int32, 'eighteen':Varchar, 19:Int32, 'nineteen':Varchar, 20:Int32, 'twenty':Varchar, 21:Int32, 'twenty-one':Varchar, 22:Int32, 'twenty-two':Varchar, 23:Int32, 'twenty-three':Varchar, 24:Int32, 'twenty-four':Varchar, 25:Int32, 'twenty-five':Varchar, 26:Int32, 'twenty-six':Varchar, 27:Int32, 'twenty-seven':Varchar, 28:Int32, 'twenty-eight':Varchar, 29:Int32, 'twenty-nine':Varchar, 30:Int32, 'thirty':Varchar, 31:Int32, 'thirty-one':Varchar, 32:Int32, 'thirty-two':Varchar, 33:Int32, 'thirty-three':Varchar, 34:Int32, 'thirty-four':Varchar, 35:Int32, 'thirty-five':Varchar, 36:Int32, 'thirty-six':Varchar, 37:Int32, 'thirty-seven':Varchar, 38:Int32, 'thirty-eight':Varchar, 39:Int32, 'thirty-nine':Varchar, 40:Int32, 'forty':Varchar, 41:Int32, 'forty-one':Varchar, 42:Int32, 'forty-two':Varchar, 43:Int32, 'forty-three':Varchar, 44:Int32, 'forty-four':Varchar, 45:Int32, 'forty-five':Varchar, 46:Int32, 'forty-six':Varchar, 47:Int32, 'forty-seven':Varchar, 48:Int32, 'forty-eight':Varchar, 49:Int32, 'forty-nine':Varchar, 50:Int32, 'fifty':Varchar, 51:Int32, 'fifty-one':Varchar, 52:Int32, 'fifty-two':Varchar, 53:Int32, 'fifty-three':Varchar, 54:Int32, 'fifty-four':Varchar, 55:Int32, 'fifty-five':Varchar, 56:Int32, 'fifty-six':Varchar, 57:Int32, 'fifty-seven':Varchar, 58:Int32, 'fifty-eight':Varchar, 59:Int32, 'fifty-nine':Varchar, 60:Int32, 'sixty':Varchar, 61:Int32, 'sixty-one':Varchar, 62:Int32, 'sixty-two':Varchar, 63:Int32, 'sixty-three':Varchar, 64:Int32, 'sixty-four':Varchar, 65:Int32, 'sixty-five':Varchar, 66:Int32, 'sixty-six':Varchar, 67:Int32, 'sixty-seven':Varchar, 68:Int32, 'sixty-eight':Varchar, 69:Int32, 'sixty-nine':Varchar, 70:Int32, 'seventy':Varchar, 71:Int32, 'seventy-one':Varchar, 72:Int32, 'seventy-two':Varchar, 73:Int32, 'seventy-three':Varchar, 74:Int32, 'seventy-four':Varchar, 75:Int32, 'seventy-five':Varchar, 76:Int32, 'seventy-six':Varchar, 77:Int32, 'seventy-seven':Varchar, 78:Int32, 'seventy-eight':Varchar, 79:Int32, 'seventy-nine':Varchar, 80:Int32, 'eighty':Varchar, 81:Int32, 'eighty-one':Varchar, 82:Int32, 'eighty-two':Varchar, 83:Int32, 'eighty-three':Varchar, 84:Int32, 'eighty-four':Varchar, 85:Int32, 'eighty-five':Varchar, 86:Int32, 'eighty-six':Varchar, 87:Int32, 'eighty-seven':Varchar, 88:Int32, 'eighty-eight':Varchar, 89:Int32, 'eighty-nine':Varchar, 90:Int32, 'ninety':Varchar, 91:Int32, 'ninety-one':Varchar, 92:Int32, 'ninety-two':Varchar, 93:Int32, 'ninety-three':Varchar, 94:Int32, 'ninety-four':Varchar, 95:Int32, 'ninety-five':Varchar, 96:Int32, 'ninety-six':Varchar, 97:Int32, 'ninety-seven':Varchar, 98:Int32, 'ninety-eight':Varchar, 99:Int32, 'ninety-nine':Varchar, 100:Int32, 'one hundred':Varchar, '114514':Varchar) as $expr1
      └─BatchScan { table: t1, columns: [t1.c1], distribution: SomeShard }
- id: then_arm_could_be_expression_pattern
  before:
  - create_table
  sql: |
    select
      case c1
        when 1 then c1 + 1
        when 2 then c2 + 1
        when 3 then c3 + 1
        when 4 then c1 + 2
        when 5 then c2 + 2
        when 6 then c3 + 2
        when 7 then c1 + 3
        when 8 then c2 + 3
        when 9 then c3 + 3
        when 10 then c1 + c2 + 1
        when 11 then c2 + c3 + 2
        when 12 then c3 + c1 + 2
        when 13 then c1 + c3
        when 14 then c2 + c2
        when 15 then c3 + c1
        when 16 then c1 + c2 + 2
        when 17 then c2 + c3 + 2
        when 18 then c3 + c1 + 2
        when 19 then c1 + c2 + c3 + 1
        when 20 then c2 + c3 + c1 + 1
        when 21 then c3 + c1 + c2 + 1
        when 22 then c1 + c2 + c3 + c1
        when 23 then c2 + c3 + c1 + c2
        when 24 then c3 + c1 + c2 + c3
        when 25 then c1 + 1
        when 26 then c2 + 1
        when 27 then c3 + 1
        when 28 then c1 + 2
        when 29 then c2 + 2
        when 30 then c3 + 2
        when 31 then c1 + 1030
      else
        114514 + c1 + c2 + c3 + 1919810
      end
    from t1;
  logical_plan: |-
    LogicalProject { exprs: [ConstantLookup(t1.c1, 1:Int32, (t1.c1 + 1:Int32), 2:Int32, (t1.c2 + 1:Int32), 3:Int32, (t1.c3 + 1:Int32), 4:Int32, (t1.c1 + 2:Int32), 5:Int32, (t1.c2 + 2:Int32), 6:Int32, (t1.c3 + 2:Int32), 7:Int32, (t1.c1 + 3:Int32), 8:Int32, (t1.c2 + 3:Int32), 9:Int32, (t1.c3 + 3:Int32), 10:Int32, ((t1.c1 + t1.c2) + 1:Int32), 11:Int32, ((t1.c2 + t1.c3) + 2:Int32), 12:Int32, ((t1.c3 + t1.c1) + 2:Int32), 13:Int32, (t1.c1 + t1.c3), 14:Int32, (t1.c2 + t1.c2), 15:Int32, (t1.c3 + t1.c1), 16:Int32, ((t1.c1 + t1.c2) + 2:Int32), 17:Int32, ((t1.c2 + t1.c3) + 2:Int32), 18:Int32, ((t1.c3 + t1.c1) + 2:Int32), 19:Int32, (((t1.c1 + t1.c2) + t1.c3) + 1:Int32), 20:Int32, (((t1.c2 + t1.c3) + t1.c1) + 1:Int32), 21:Int32, (((t1.c3 + t1.c1) + t1.c2) + 1:Int32), 22:Int32, (((t1.c1 + t1.c2) + t1.c3) + t1.c1), 23:Int32, (((t1.c2 + t1.c3) + t1.c1) + t1.c2), 24:Int32, (((t1.c3 + t1.c1) + t1.c2) + t1.c3), 25:Int32, (t1.c1 + 1:Int32), 26:Int32, (t1.c2 + 1:Int32), 27:Int32, (t1.c3 + 1:Int32), 28:Int32, (t1.c1 + 2:Int32), 29:Int32, (t1.c2 + 2:Int32), 30:Int32, (t1.c3 + 2:Int32), 31:Int32, (t1.c1 + 1030:Int32), ((((114514:Int32 + t1.c1) + t1.c2) + t1.c3) + 1919810:Int32)) as $expr1] }
    └─LogicalScan { table: t1, columns: [t1.c1, t1.c2, t1.c3, t1._row_id, t1._rw_timestamp] }
  batch_plan: |-
    BatchExchange { order: [], dist: Single }
    └─BatchProject { exprs: [ConstantLookup(t1.c1, 1:Int32, $expr4, 2:Int32, $expr5, 3:Int32, $expr6, 4:Int32, $expr7, 5:Int32, $expr8, 6:Int32, $expr9, 7:Int32, (t1.c1 + 3:Int32), 8:Int32, (t1.c2 + 3:Int32), 9:Int32, (t1.c3 + 3:Int32), 10:Int32, ($expr1 + 1:Int32), 11:Int32, $expr10, 12:Int32, $expr11, 13:Int32, (t1.c1 + t1.c3), 14:Int32, (t1.c2 + t1.c2), 15:Int32, $expr3, 16:Int32, ($expr1 + 2:Int32), 17:Int32, $expr10, 18:Int32, $expr11, 19:Int32, ($expr12 + 1:Int32), 20:Int32, ($expr13 + 1:Int32), 21:Int32, ($expr14 + 1:Int32), 22:Int32, ($expr12 + t1.c1), 23:Int32, ($expr13 + t1.c2), 24:Int32, ($expr14 + t1.c3), 25:Int32, $expr4, 26:Int32, $expr5, 27:Int32, $expr6, 28:Int32, $expr7, 29:Int32, $expr8, 30:Int32, $expr9, 31:Int32, (t1.c1 + 1030:Int32), ((((114514:Int32 + t1.c1) + t1.c2) + t1.c3) + 1919810:Int32)) as $expr15] }
      └─BatchProject { exprs: [t1.c1, t1.c2, t1.c3, (t1.c1 + 1:Int32) as $expr4, (t1.c2 + 1:Int32) as $expr5, (t1.c3 + 1:Int32) as $expr6, (t1.c1 + 2:Int32) as $expr7, (t1.c2 + 2:Int32) as $expr8, (t1.c3 + 2:Int32) as $expr9, $expr1, ($expr2 + 2:Int32) as $expr10, ($expr3 + 2:Int32) as $expr11, $expr3, ($expr1 + t1.c3) as $expr12, ($expr2 + t1.c1) as $expr13, ($expr3 + t1.c2) as $expr14] }
        └─BatchProject { exprs: [t1.c1, t1.c2, t1.c3, (t1.c1 + t1.c2) as $expr1, (t1.c2 + t1.c3) as $expr2, (t1.c3 + t1.c1) as $expr3] }
          └─BatchScan { table: t1, columns: [t1.c1, t1.c2, t1.c3], distribution: SomeShard }
- id: use_with_built_in_functions_pattern
  before:
  - create_table
  sql: |
    select
      case c1
        when 1 then regexp_replace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 2 then regexp_replace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 3 then regexp_replace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 4 then regexp_replace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 5 then regexp_replace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 6 then regexp_replace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 7 then regexp_replace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 8 then regexp_replace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 9 then regexp_replace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 10 then regexp_replace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 11 then regexp_replace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 12 then regexp_replace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 13 then regexp_replace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 14 then regexp_replace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 15 then regexp_replace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 16 then regexp_replace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 17 then regexp_replace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 18 then regexp_replace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 19 then regexp_replace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 20 then regexp_replace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 21 then regexp_replace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 22 then regexp_replace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 23 then regexp_replace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 24 then regexp_replace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 25 then regexp_replace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 26 then regexp_replace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 27 then regexp_replace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 28 then regexp_replace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 29 then regexp_replace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 30 then regexp_replace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')
        when 31 then '😡😡😡这是爱情😭😭😭'
      else
        '❤️‍🔥❤️‍🔥❤️‍🔥❤️‍🔥❤️‍🔥❤️‍🔥'
      end
    from t1;
  logical_plan: |-
    LogicalProject
    ├─exprs: ConstantLookup(t1.c1, 1:Int32, RegexpReplace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 2:Int32, RegexpReplace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 3:Int32, RegexpReplace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 4:Int32, RegexpReplace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 5:Int32, RegexpReplace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 6:Int32, RegexpReplace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 7:Int32, RegexpReplace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 8:Int32, RegexpReplace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 9:Int32, RegexpReplace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 10:Int32, RegexpReplace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 11:Int32, RegexpReplace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 12:Int32, RegexpReplace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 13:Int32, RegexpReplace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 14:Int32, RegexpReplace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 15:Int32, RegexpReplace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 16:Int32, RegexpReplace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 17:Int32, RegexpReplace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 18:Int32, RegexpReplace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 19:Int32, RegexpReplace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 20:Int32, RegexpReplace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 21:Int32, RegexpReplace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 22:Int32, RegexpReplace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 23:Int32, RegexpReplace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 24:Int32, RegexpReplace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 25:Int32, RegexpReplace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 26:Int32, RegexpReplace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 27:Int32, RegexpReplace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 28:Int32, RegexpReplace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 29:Int32, RegexpReplace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 30:Int32, RegexpReplace('💗💗💗💗💗亲爱的😭baz这不是爱情❤️‍🔥':Varchar, 'baz(...)':Varchar, '这是🥵':Varchar, 'ic':Varchar), 31:Int32, '😡😡😡这是爱情😭😭😭':Varchar, '❤️‍🔥❤️‍🔥❤️‍🔥❤️‍🔥❤️‍🔥❤️‍🔥':Varchar) as $expr1
    └─LogicalScan { table: t1, columns: [t1.c1, t1.c2, t1.c3, t1._row_id, t1._rw_timestamp] }
  batch_plan: |-
    BatchExchange { order: [], dist: Single }
    └─BatchProject { exprs: [ConstantLookup(t1.c1, 1:Int32, '💩💩💩💩💩foo🤔️bar亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 2:Int32, '💗💗💗💗💗亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 3:Int32, '💩💩💩💩💩foo🤔️bar亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 4:Int32, '💗💗💗💗💗亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 5:Int32, '💩💩💩💩💩foo🤔️bar亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 6:Int32, '💗💗💗💗💗亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 7:Int32, '💩💩💩💩💩foo🤔️bar亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 8:Int32, '💗💗💗💗💗亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 9:Int32, '💩💩💩💩💩foo🤔️bar亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 10:Int32, '💗💗💗💗💗亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 11:Int32, '💩💩💩💩💩foo🤔️bar亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 12:Int32, '💗💗💗💗💗亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 13:Int32, '💩💩💩💩💩foo🤔️bar亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 14:Int32, '💗💗💗💗💗亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 15:Int32, '💩💩💩💩💩foo🤔️bar亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 16:Int32, '💗💗💗💗💗亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 17:Int32, '💩💩💩💩💩foo🤔️bar亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 18:Int32, '💗💗💗💗💗亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 19:Int32, '💩💩💩💩💩foo🤔️bar亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 20:Int32, '💗💗💗💗💗亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 21:Int32, '💩💩💩💩💩foo🤔️bar亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 22:Int32, '💗💗💗💗💗亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 23:Int32, '💩💩💩💩💩foo🤔️bar亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 24:Int32, '💗💗💗💗💗亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 25:Int32, '💩💩💩💩💩foo🤔️bar亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 26:Int32, '💗💗💗💗💗亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 27:Int32, '💩💩💩💩💩foo🤔️bar亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 28:Int32, '💗💗💗💗💗亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 29:Int32, '💩💩💩💩💩foo🤔️bar亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 30:Int32, '💗💗💗💗💗亲爱的😭这是🥵爱情❤️‍🔥':Varchar, 31:Int32, '😡😡😡这是爱情😭😭😭':Varchar, '❤️‍🔥❤️‍🔥❤️‍🔥❤️‍🔥❤️‍🔥❤️‍🔥':Varchar) as $expr1] }
      └─BatchScan { table: t1, columns: [t1.c1], distribution: SomeShard }
- id: const_case_when_basic
  sql: |
    select
      case 1
        when 1 then 114514
        else 1919810
      end;
  logical_plan: |-
    LogicalProject { exprs: [114514:Int32] }
    └─LogicalValues { rows: [[]], schema: Schema { fields: [] } }
  batch_plan: 'BatchValues { rows: [[114514:Int32]] }'
- id: const_case_when_with_table
  before:
  - create_table
  sql: |
    select
      case 1
        when 1 then 114514
        when 2 then 1919810
        when 3 then 101010
        else 111111
      end
    from t1;
  logical_plan: |-
    LogicalProject { exprs: [114514:Int32] }
    └─LogicalScan { table: t1, columns: [t1.c1, t1.c2, t1.c3, t1._row_id, t1._rw_timestamp] }
  batch_plan: |-
    BatchExchange { order: [], dist: Single }
    └─BatchProject { exprs: [114514:Int32] }
      └─BatchScan { table: t1, columns: [], distribution: SomeShard }
- id: const_case_when_with_functions
  sql: |
    select
      case 2
        when 1 then regexp_count('foobarbaz', 'b..', 3)
        when 2 then regexp_count('ABCABCAXYaxy', '[a-c]', 1, 'i')
        when 3 then regexp_count('ABCABCAXYaxy', 'A.')
        else 0
      end;
  logical_plan: |-
    LogicalProject { exprs: [RegexpCount('ABCABCAXYaxy':Varchar, '[a-c]':Varchar, 1:Int32, 'i':Varchar) as $expr1] }
    └─LogicalValues { rows: [[]], schema: Schema { fields: [] } }
  batch_plan: 'BatchValues { rows: [[8:Int32]] }'
- id: const_case_when_fallback_case
  sql: |
    select
      case 1
        when 0 then 114514
        else 1919810
      end;
  logical_plan: |-
    LogicalProject { exprs: [1919810:Int32] }
    └─LogicalValues { rows: [[]], schema: Schema { fields: [] } }
  batch_plan: 'BatchValues { rows: [[1919810:Int32]] }'
- id: case_when_optimizable_pattern_basic
  before:
  - create_table
  sql: |
    select
      case
        when c1 = 1 then 'one'
        when c1 = 2 then 'two'
        when c1 = 3 then 'three'
        when c1 = 4 then 'four'
        when c1 = 5 then 'five'
        when c1 = 6 then 'six'
        when c1 = 7 then 'seven'
        when c1 = 8 then 'eight'
        when c1 = 9 then 'nine'
        when c1 = 10 then 'ten'
        when c1 = 11 then 'eleven'
        when c1 = 12 then 'twelve'
        when c1 = 13 then 'thirteen'
        when c1 = 14 then 'fourteen'
        when c1 = 15 then 'fifteen'
        when c1 = 16 then 'sixteen'
        when c1 = 17 then 'seventeen'
        when c1 = 18 then 'eighteen'
        when c1 = 19 then 'nineteen'
        when c1 = 20 then 'twenty'
        when c1 = 21 then 'twenty-one'
        when c1 = 22 then 'twenty-two'
        when c1 = 23 then 'twenty-three'
        when c1 = 24 then 'twenty-four'
        when c1 = 25 then 'twenty-five'
        when c1 = 26 then 'twenty-six'
        when c1 = 27 then 'twenty-seven'
        when c1 = 28 then 'twenty-eight'
        when c1 = 29 then 'twenty-nine'
        when c1 = 30 then 'thirty'
        when c1 = 31 then 'thirty-one'
        else 'other'
      end
    from t1;
  logical_plan: |-
    LogicalProject { exprs: [ConstantLookup(t1.c1, 1:Int32, 'one':Varchar, 2:Int32, 'two':Varchar, 3:Int32, 'three':Varchar, 4:Int32, 'four':Varchar, 5:Int32, 'five':Varchar, 6:Int32, 'six':Varchar, 7:Int32, 'seven':Varchar, 8:Int32, 'eight':Varchar, 9:Int32, 'nine':Varchar, 10:Int32, 'ten':Varchar, 11:Int32, 'eleven':Varchar, 12:Int32, 'twelve':Varchar, 13:Int32, 'thirteen':Varchar, 14:Int32, 'fourteen':Varchar, 15:Int32, 'fifteen':Varchar, 16:Int32, 'sixteen':Varchar, 17:Int32, 'seventeen':Varchar, 18:Int32, 'eighteen':Varchar, 19:Int32, 'nineteen':Varchar, 20:Int32, 'twenty':Varchar, 21:Int32, 'twenty-one':Varchar, 22:Int32, 'twenty-two':Varchar, 23:Int32, 'twenty-three':Varchar, 24:Int32, 'twenty-four':Varchar, 25:Int32, 'twenty-five':Varchar, 26:Int32, 'twenty-six':Varchar, 27:Int32, 'twenty-seven':Varchar, 28:Int32, 'twenty-eight':Varchar, 29:Int32, 'twenty-nine':Varchar, 30:Int32, 'thirty':Varchar, 31:Int32, 'thirty-one':Varchar, 'other':Varchar) as $expr1] }
    └─LogicalScan { table: t1, columns: [t1.c1, t1.c2, t1.c3, t1._row_id, t1._rw_timestamp] }
  batch_plan: |-
    BatchExchange { order: [], dist: Single }
    └─BatchProject { exprs: [ConstantLookup(t1.c1, 1:Int32, 'one':Varchar, 2:Int32, 'two':Varchar, 3:Int32, 'three':Varchar, 4:Int32, 'four':Varchar, 5:Int32, 'five':Varchar, 6:Int32, 'six':Varchar, 7:Int32, 'seven':Varchar, 8:Int32, 'eight':Varchar, 9:Int32, 'nine':Varchar, 10:Int32, 'ten':Varchar, 11:Int32, 'eleven':Varchar, 12:Int32, 'twelve':Varchar, 13:Int32, 'thirteen':Varchar, 14:Int32, 'fourteen':Varchar, 15:Int32, 'fifteen':Varchar, 16:Int32, 'sixteen':Varchar, 17:Int32, 'seventeen':Varchar, 18:Int32, 'eighteen':Varchar, 19:Int32, 'nineteen':Varchar, 20:Int32, 'twenty':Varchar, 21:Int32, 'twenty-one':Varchar, 22:Int32, 'twenty-two':Varchar, 23:Int32, 'twenty-three':Varchar, 24:Int32, 'twenty-four':Varchar, 25:Int32, 'twenty-five':Varchar, 26:Int32, 'twenty-six':Varchar, 27:Int32, 'twenty-seven':Varchar, 28:Int32, 'twenty-eight':Varchar, 29:Int32, 'twenty-nine':Varchar, 30:Int32, 'thirty':Varchar, 31:Int32, 'thirty-one':Varchar, 'other':Varchar) as $expr1] }
      └─BatchScan { table: t1, columns: [t1.c1], distribution: SomeShard }
