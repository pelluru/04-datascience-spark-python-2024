- sql: values (11, 22), (33+(1+2), 44);
  expected_outputs:
  - batch_plan
  - stream_plan
- sql: select * from t
  expected_outputs:
  - binder_error
- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from t;
  expected_outputs:
  - batch_plan
  - stream_plan
- sql: |
    create table t (v1 bigint, v2 double precision);
    select t2.* from t;
  expected_outputs:
  - binder_error
- sql: |
    create table t ();
    select * from t where 1>2 and 1=1 and 3<1 and 4<>1 or 1=1 and 2>=1 and 1<=2;
  expected_outputs:
  - stream_plan
  - batch_plan
- sql: |
    create table t (v1 int);
    select * from t where v1<1;
  expected_outputs:
  - stream_plan
  - batch_plan
- name: test boolean expression common factor extraction
  sql: |
    create table t (v1 Boolean, v2 Boolean, v3 Boolean);
    select * from t where v1 AND v2 AND ((v1 AND v2) OR (v2 AND v3));
  expected_outputs:
  - batch_plan
- name: test boolean expression simplification
  sql: |
    create table t (v1 Boolean, v2 Boolean, v3 Boolean);
    select * from t where v1 AND NOT(v1 OR v2 Or NOT(v1 AND v2 AND true));
  expected_outputs:
  - batch_plan
- name: test boolean expression simplification
  sql: |
    create table t (v1 Boolean, v2 Boolean);
    select * from t where (v1 AND v2) OR (v1 AND v2);
  expected_outputs:
  - batch_plan
- name: constant folding for IS TRUE, IS FALSE, IS NULL
  sql: |
    create table t(a Boolean);
    select * from t where (NULL IS NULL) IS TRUE AND FALSE IS FALSE AND a;
  expected_outputs:
  - logical_plan
- name: constant folding for IS NOT TRUE, IS NOT FALSE
  sql: |
    create table t(a Boolean);
    select * from t where (NULL IS NOT TRUE) IS NOT FALSE AND a IS NOT TRUE;
  expected_outputs:
  - logical_plan
- name: constant folding IS NOT NULL
  sql: |
    create table t(a double precision);
    select * from t where (a IS NOT NULL AND 3.14 IS NOT NULL) OR (NULL IS NOT NULL);
  expected_outputs:
  - logical_plan
- sql: |
    create table t (v1 int, v2 int);
    select v1 from t;
  expected_outputs:
  - batch_plan
  - stream_plan
- sql: select 1
  expected_outputs:
  - batch_plan
- sql: |
    create table t (v1 bigint, v2 double precision);
    select a from t as t2(a);
  expected_outputs:
  - batch_plan
- sql: |
    create table t (v1 int, v2 int);
    delete from t;
  expected_outputs:
  - batch_plan
- sql: |
    create table t (v1 int, v2 int);
    delete from t where v1 = 1;
  expected_outputs:
  - batch_plan
- sql: |
    create table t (v1 int, v2 int);
    delete from t where v1;
  expected_outputs:
  - binder_error
- sql: |
    select * from generate_series('2'::INT,'10'::INT,'2'::INT);
  expected_outputs:
  - batch_plan
- sql: |
    select * from unnest(Array[1,2,3]);
  expected_outputs:
  - batch_plan
- sql: |
    select * from unnest(Array[Array[1,2,3], Array[4,5,6]]);
  expected_outputs:
  - batch_plan
- sql: |
    create table t1 (x int);
    select * from t1 where EXISTS(select * where t1.x=1);
  expected_outputs:
  - binder_error
- sql: |
    select *;
  expected_outputs:
  - binder_error
- sql: |
    select * where x = 1;
  expected_outputs:
  - binder_error
- sql: |
    create table t ();
    select * from t;
  expected_outputs:
  - logical_plan
- name: disallow subquery in values
  sql: |
    values(1, (select 1));
  expected_outputs:
  - binder_error
- name: disallow correlated_input_ref in values
  sql: |
    create table t(v1 int);
    select v1 from t where exists (values(v1));
  expected_outputs:
  - binder_error
- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from t limit 1
  expected_outputs:
  - batch_plan
- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from t order by v1 limit 1
  expected_outputs:
  - batch_plan
- sql: |
    create table t (v1 int, v2 int);
    create materialized view mv(A,b) as select * from t;
    select a, b from mv;
  expected_outputs:
  - stream_plan
- sql: |
    create table t (v1 int, v2 int);
    create materialized view mv(a,b) as select v1+1,v2+1 from t;
    select * from mv;
  expected_outputs:
  - stream_plan
- sql: |
    create table t (id int primary key, col int);
    create index idx on t(col);
    select id from idx;
  expected_outputs:
  - stream_plan
- sql: |
    select * from generate_series(1, 10000000, 1) where Now() is null;
  expected_outputs:
  - batch_plan
- sql: |
    create table t (v int);
    select * from t natural join (select * from t where 1=0);
  expected_outputs:
  - stream_plan
  - batch_plan
