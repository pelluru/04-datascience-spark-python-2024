- name: watermark on source
  sql: |
    create source t (v1 timestamp with time zone, watermark for v1 as v1 - INTERVAL '1' SECOND) with (connector = 'kinesis') FORMAT PLAIN ENCODE JSON;
    select t.v1 - INTERVAL '2' SECOND as v1 from t;
  expected_outputs:
  - stream_plan
  - stream_dist_plan
  - logical_plan
- name: watermark on append only table with source
  sql: |
    explain create table t (v1 timestamp with time zone, watermark for v1 as v1 - INTERVAL '1' SECOND) append only with (connector = 'kafka', kafka.topic = 'kafka_3_partition_topic', kafka.brokers = '127.0.0.1:1234', kafka.scan.startup.mode='earliest') FORMAT PLAIN ENCODE JSON;
  expected_outputs:
  - explain_output
- name: watermark on append only table without source
  sql: |
    explain create table t (v1 timestamp with time zone, watermark for v1 as v1 - INTERVAL '1' SECOND) append only;
  expected_outputs:
  - explain_output
- name: hash agg
  sql: |
    create table t (ts timestamp with time zone, v1 int, v2 int, watermark for ts as ts - INTERVAL '1' SECOND) append only;
    select count(v2) from t group by ts, v1;
  expected_outputs:
  - stream_plan
- name: inner window join
  sql: |
    create table t1 (ts timestamp with time zone, v1 int, v2 int, watermark for ts as ts - INTERVAL '1' SECOND) append only;
    create table t2 (ts timestamp with time zone, v1 int, v2 int, watermark for ts as ts - INTERVAL '1' SECOND) append only;
    select t1.ts as t1_ts, t2.ts as ts2, t1.v1 as t1_v1, t1.v2 as t1_v2, t2.v1 as t2_v1, t2.v2 as t2_v2 from t1, t2 where t1.ts = t2.ts;
  expected_outputs:
  - stream_plan
- name: left semi window join
  sql: |
    create table t1 (ts timestamp with time zone, v1 int, v2 int, watermark for ts as ts - INTERVAL '1' SECOND) append only;
    create table t2 (ts timestamp with time zone, v1 int, v2 int, watermark for ts as ts - INTERVAL '1' SECOND) append only;
    select t1.ts as t1_ts, t1.v1 as t1_v1, t1.v2 as t1_v2 from t1 where exists (select * from t2 where t1.ts = t2.ts);
  expected_outputs:
  - stream_plan
- name: interval join(left outer join)
  sql: |
    create table t1 (ts timestamp with time zone, v1 int, v2 int, watermark for ts as ts - INTERVAL '1' SECOND) append only;
    create table t2 (ts timestamp with time zone, v1 int, v2 int, watermark for ts as ts - INTERVAL '1' SECOND) append only;
    select t1.ts as t1_ts, t1.v1 as t1_v1, t1.v2 as t1_v2, t2.ts as t2_ts, t2.v1 as t2_v1, t2.v2 as t2_v2 from t1 left outer join t2 on (t1.v1 = t2.v1 and (t1.ts >= t2.ts + INTERVAL '1' SECOND) and (t2.ts >= t1.ts + INTERVAL '1' SECOND));
  expected_outputs:
  - logical_plan
  - stream_plan
- name: interval join (inner join)
  sql: |
    create table t1 (ts timestamp with time zone, v1 int, v2 int, watermark for ts as ts - INTERVAL '1' SECOND) append only;
    create table t2 (ts timestamp with time zone, v1 int, v2 int, watermark for ts as ts - INTERVAL '1' SECOND) append only;
    select t1.ts as t1_ts, t1.v1 as t1_v1, t1.v2 as t1_v2, t2.ts as t2_ts, t2.v1 as t2_v1, t2.v2 as t2_v2 from t1 join t2 on (t1.v1 = t2.v1 and (t1.ts >= t2.ts + INTERVAL '1' SECOND) and (t2.ts >= t1.ts + INTERVAL '1' SECOND));
  expected_outputs:
  - stream_plan
  - logical_plan
- name: union all
  sql: |
    create table t1 (ts timestamp with time zone, v1 int, v2 int, watermark for ts as ts - INTERVAL '1' SECOND) append only;
    create table t2 (ts timestamp with time zone, v1 int, v2 int, watermark for ts as ts - INTERVAL '1' SECOND) append only;
    select * from t1 Union all select * from t2;
  expected_outputs:
  - stream_plan
- name: union
  sql: |
    create table t1 (ts timestamp with time zone, v1 int, v2 int, watermark for ts as ts - INTERVAL '1' SECOND) append only;
    create table t2 (ts timestamp with time zone, v1 int, v2 int, watermark for ts as ts - INTERVAL '1' SECOND) append only;
    select * from t1 Union select * from t2;
  expected_outputs:
  - stream_plan
- name: tumble
  sql: |
    create table t (ts timestamp with time zone, v1 int, v2 int, watermark for ts as ts - INTERVAL '1' SECOND) append only;
    select * from tumble(t, ts, interval '3' minute);
  expected_outputs:
  - stream_plan
- name: hop all
  sql: |
    create table t (ts timestamp with time zone, v1 int, v2 int, watermark for ts as ts - INTERVAL '1' SECOND) append only;
    select * from hop(t, ts, interval '1' minute, interval '3' minute);
  expected_outputs:
  - stream_plan
- name: hop ts
  sql: |
    create table t (ts timestamp with time zone, v1 int, v2 int, watermark for ts as ts - INTERVAL '1' SECOND) append only;
    select ts from hop(t, ts, interval '1' minute, interval '3' minute);
  expected_outputs:
  - stream_plan
- name: hop start
  sql: |
    create table t (ts timestamp with time zone, v1 int, v2 int, watermark for ts as ts - INTERVAL '1' SECOND) append only;
    select window_end from hop(t, ts, interval '1' minute, interval '3' minute);
  expected_outputs:
  - stream_plan
- name: hop end
  sql: |
    create table t (ts timestamp with time zone, v1 int, v2 int, watermark for ts as ts - INTERVAL '1' SECOND) append only;
    select window_start from hop(t, ts, interval '1' minute, interval '3' minute);
  expected_outputs:
  - stream_plan
- name: unnest
  sql: |
    create table t (ts timestamp with time zone, v1 int, watermark for ts as ts - INTERVAL '1' SECOND) append only;
    explain create materialized view mv as select t.ts, unnest(Array[1,2,3]) from t emit on window close;
  expected_outputs:
    - explain_output
