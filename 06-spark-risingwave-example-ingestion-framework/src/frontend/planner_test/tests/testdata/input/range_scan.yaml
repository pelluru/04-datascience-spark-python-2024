- id: create_table_and_mv
  sql: |
    CREATE TABLE orders (
            order_id BIGINT,
            user_id BIGINT,
            date INTEGER);
    CREATE MATERIALIZED VIEW orders_count_by_user AS
      SELECT user_id, date, count(*) AS orders_count FROM orders GROUP BY user_id, date;
    CREATE MATERIALIZED VIEW orders_count_by_user_desc AS
      SELECT user_id, date, count(*) AS orders_count FROM orders GROUP BY user_id, date ORDER BY user_id DESC;
  expected_outputs: []
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = 42
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id < 43
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = 42 + 1
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = 1/0
  expected_outputs:
    - batch_error
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = 2147483647 + 1
  expected_outputs:
    - batch_error
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = 'a'
  expected_outputs:
    - batch_error
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id > 'a'
  expected_outputs:
    - batch_error
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = '42'
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = NULL
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id IS NULL
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id > NULL
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = 42 AND date = 1111
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id > 42 AND date = 1111 AND 2>1
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE date > 1111 AND user_id = 42 AND 5<6 AND date <= 6666
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id in (42, 43)
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id in (42+1, 44-1)
  expected_outputs:
    - batch_plan
- name: If the IN list has a larger type than the column, the InputRef is casted. Currently this case is not converted to scan range yet.
  before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id in (42.0, 43.0)
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id in ('42', '43')
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id in ('42', '43.0')
  expected_outputs:
    - batch_error
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id in (2147483648, 2147483649) AND date = 6666
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = 42 AND date in (2222, 3333)
  expected_outputs:
    - batch_plan
- name: test duplicate value in in-list
  before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = 42 AND date in (2222, 2222)
  expected_outputs:
    - batch_plan
- name: test NULL in in-list
  before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = 42 AND date in (2222, NULL)
  expected_outputs:
    - batch_plan
- name: test NULL in in-list
  before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = 42 AND date in (NULL)
  expected_outputs:
    - batch_plan
- name: test multiple in-list
  before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = 42 AND date in (2222, 3333) AND date in (4444, 3333)
  expected_outputs:
    - batch_plan
- name: test eq & in-list
  before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = 42 AND date in (2222, 3333) AND date = 3333
  expected_outputs:
    - batch_plan
- name: test eq & in-list
  before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = 42 AND date in (2222, 3333) AND date = 4444
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id in (2147483648, 2147483649) AND date in (2222, 3333)
  expected_outputs:
    - batch_plan
- id: create_table_and_mv_ordered
  sql: |
    CREATE TABLE orders (
            order_id BIGINT,
            user_id INTEGER,
            date INTEGER);
    CREATE MATERIALIZED VIEW orders_count_by_user_ordered AS
      SELECT user_id, date, count(*) AS orders_count FROM orders
      GROUP BY user_id, date
      ORDER BY orders_count;
  expected_outputs: []
- before:
    - create_table_and_mv_ordered
  sql: |
    SELECT * FROM orders_count_by_user_ordered WHERE user_id = 42
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv_ordered
  sql: |
    SELECT * FROM orders_count_by_user_ordered WHERE user_id > 42 AND orders_count = 10
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv_ordered
  sql: |
    SELECT * FROM orders_count_by_user_ordered WHERE orders_count = 10
  expected_outputs:
    - batch_plan
- name: merge mutiple upper bound
  before:
    - create_table_and_mv_ordered
  sql: |
    SELECT * FROM orders_count_by_user_ordered WHERE orders_count < 10 and orders_count < 30
  expected_outputs:
    - batch_plan
- name: merge include and exclude upper bound of same value
  before:
    - create_table_and_mv_ordered
  sql: |
    SELECT * FROM orders_count_by_user_ordered WHERE orders_count < 10 and orders_count <= 10
  expected_outputs:
    - batch_plan
- name: merge mutiple lower bound
  before:
    - create_table_and_mv_ordered
  sql: |
    SELECT * FROM orders_count_by_user_ordered WHERE orders_count > 10 and orders_count > 30
  expected_outputs:
    - batch_plan
- name: merge include and exclude lower bound of same value
  before:
    - create_table_and_mv_ordered
  sql: |
    SELECT * FROM orders_count_by_user_ordered WHERE orders_count > 10 and orders_count >= 10
  expected_outputs:
    - batch_plan
- name: invalid range
  before:
    - create_table_and_mv_ordered
  sql: |
    SELECT * FROM orders_count_by_user_ordered WHERE orders_count > 10 and orders_count < 5
  expected_outputs:
    - batch_plan
- name: merge cmp and eq condition
  before:
    - create_table_and_mv_ordered
  sql: |
    SELECT * FROM orders_count_by_user_ordered WHERE orders_count > 20 and orders_count < 30 and orders_count = 25
  expected_outputs:
    - batch_plan
- name: invalid range of merging cmp and eq condition
  before:
    - create_table_and_mv_ordered
  sql: |
    SELECT * FROM orders_count_by_user_ordered WHERE orders_count > 20 and orders_count < 30 and orders_count = 35
  expected_outputs:
    - batch_plan
- name: merge cmp and const-in condition
  before:
    - create_table_and_mv_ordered
  sql: |
    SELECT * FROM orders_count_by_user_ordered WHERE orders_count in (10,20,30,40) and orders_count <30
  expected_outputs:
    - batch_plan
- name: invalid range of merging cmp and const-in condition
  before:
    - create_table_and_mv_ordered
  sql: |
    SELECT * FROM orders_count_by_user_ordered WHERE orders_count in (10,20,30,40) and orders_count > 50
  expected_outputs:
    - batch_plan
- name: merge null and cmp condition
  before:
    - create_table_and_mv_ordered
  sql: |
    SELECT * FROM orders_count_by_user_ordered WHERE orders_count is null and orders_count < 30
  expected_outputs:
    - batch_plan
- id: create_small
  sql: |
    CREATE TABLE t(x smallint);
    CREATE MATERIALIZED VIEW mv AS
      SELECT x from t group by x;
  expected_outputs: []
- name: When the constant with larger type is out of the range of the column's type, we can convert it as false condition.
  before:
    - create_small
  sql: |
    SELECT * FROM mv WHERE x = 60000;
  expected_outputs:
    - batch_plan
- name: When the constant with larger type is out of the upper bound of the column's type, we can convert < as true condition.
  before:
    - create_small
  sql: |
    SELECT * FROM mv WHERE x < 60000;
  expected_outputs:
    - batch_plan
- name: When the constant with larger type is out of the upper bound of the column's type, we can convert > as false condition.
  before:
    - create_small
  sql: |
    SELECT * FROM mv WHERE x > 60000;
  expected_outputs:
    - batch_plan
- name: When the constant with larger type is out of the lower bound of the column's type, we can convert < as false condition.
  before:
    - create_small
  sql: |
    SELECT * FROM mv WHERE x < -60000;
  expected_outputs:
    - batch_plan
- name: When the constant with larger type is out of the lower bound of the column's type, we can convert > as true condition.
  before:
    - create_small
  sql: |
    SELECT * FROM mv WHERE x > -60000;
  expected_outputs:
    - batch_plan
- name: When the constant with larger type is in range of the column's type, we can convert it.
  before:
    - create_small
  sql: |
    SELECT * FROM mv WHERE x < 3::bigint and x > 1::bigint;
  expected_outputs:
    - batch_plan
- name: Can't push down the in-compatitble numeric type
  before:
    - create_small
  sql: |
    SELECT * FROM mv WHERE x = 3.4;
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = 1 or user_id = 2;
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE (user_id = 1) or (user_id = 2 and date = 2222);
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE (user_id = 1) or (user_id = 2 and date in (1111, 2222));
  expected_outputs:
    - batch_plan
- name: When one arm of or clause contains other conditions, we can't convert it to scan range yet.
  before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE (user_id = 1) or (user_id = 2 and date in (1111, 2222)) or (user_id != 3);
  expected_outputs:
    - batch_plan
- name: When any arm of or clause is not equal type, we can't convert it to scan range yet.
  before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id > 1 or user_id < 10
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = 1 or user_id is null
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = 1 and user_id is null
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = 1 or (user_id is null and date = 1111)
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = 1 or (user_id = 2 and date is null)
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id = 1 or (user_id is null and date is null)
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE user_id is null or (user_id is null and date is null)
  expected_outputs:
    - batch_plan
- sql: |
    create table sbtest1(id INT, k INT, c VARCHAR, pad VARCHAR);
    create index k1 on sbtest1(k);
    select count(k) from sbtest1 where k between 0 and 5;
  expected_outputs:
    - batch_plan
- sql: |
    create table sbtest1(id INT, k INT, c VARCHAR, pad VARCHAR);
    create index k1 on sbtest1(k);
    select count(k) from sbtest1 where k between 0 and 500;
  expected_outputs:
    - batch_plan
- sql: |
    create table sbtest1(id INT, k INT, c VARCHAR, pad VARCHAR, primary key(id));
    create index k1 on sbtest1(k);
    select count(k) from sbtest1 where id between 0 and 5;
  expected_outputs:
    - batch_plan
- sql: |
    create table t (k int primary key, v int);
    select v from t where k = 2147483648; -- out of range of int32
  expected_outputs:
    - logical_plan
    - batch_plan
- name: When OR clauses contain non-overlapping conditions,, we can pushdown serveral scan_range.
  before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE (user_id < 10) or (user_id > 20);
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user_desc WHERE (user_id < 10) or (user_id > 20);
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE (user_id < 10) or (user_id >= 10);
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user_desc WHERE (user_id < 10) or (user_id >= 10);
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE (user_id < 10) or (user_id > 20) or (user_id = 15);
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user_desc WHERE (user_id < 10) or (user_id > 20) or (user_id = 15);
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE (user_id < 10 and user_id > 1) or (user_id > 20 and user_id < 30) or (user_id >= 30 and user_id < 40);
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user_desc WHERE (user_id < 10 and user_id > 1) or (user_id > 20 and user_id < 30) or (user_id >= 30 and user_id < 40);
  expected_outputs:
    - batch_plan
- name: When OR clauses contain overlapping conditions, we can merge serveral scan_range and pushdown.
  before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE (user_id < 10 and user_id > 1) or (user_id > 20 and user_id <= 30) or (user_id >= 30 and user_id < 40) or (user_id = 15);
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user_desc WHERE (user_id < 10 and user_id > 1) or (user_id > 20 and user_id <= 30) or (user_id >= 30 and user_id < 40) or (user_id = 15);
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE (user_id < 10) or (user_id > 30) or (user_id > 5 and user_id < 15);
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user_desc WHERE (user_id < 10) or (user_id > 30) or (user_id > 5 and user_id < 15);
  expected_outputs:
    - batch_plan
- name: When OR clauses contain overlapping conditions, we cannot push down if it results in a full table scan.
  before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE (user_id < 20) or (user_id > 10);
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user_desc WHERE (user_id < 20) or (user_id > 10);
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user WHERE (user_id < 20) or (user_id != 10);
  expected_outputs:
    - batch_plan
- before:
    - create_table_and_mv
  sql: |
    SELECT * FROM orders_count_by_user_desc WHERE (user_id < 20) or (user_id != 10);
  expected_outputs:
    - batch_plan
