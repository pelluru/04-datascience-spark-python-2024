- id: create_table
  sql: |
    create table t1 (c1 INT, c2 INT, c3 INT);
  expected_outputs: []

- id: basic_optimizable_pattern
  before:
  - create_table
  sql: |
    select c1 from t1 where not(c1 > 1) and (c1 > 1);
  expected_outputs:
  - logical_plan
  - batch_plan

# Since condition will be decomposed, this is something
# we could take advantages of.
- id: non_trivial_optimizable_case
  before:
  - create_table
  sql: |
    select
      c1, c2, c3 from t1
    where
      (c1 > 1)
      and (c2 > 2)
      and (c3 > 3)
      and not(c1 < 1)
      and not(c2 < 2)
      and not(c3 < 3)
      and not(c1 > 1 or c2 > 2 or c3 > 3);
  expected_outputs:
  - logical_plan
  - batch_plan

# This pattern seems optimizable at the first glance,
# but unfortunately the `and (c1 > 1 or c2 > 2 or c3 > 3)`
# will be decomposed to `not(c1 > 1) or not(c2 > 2) or not(c3 > 3)`
# which can't be optimized under current condition rewriter
# and we will just leave it intact.
- id: corner_case
  before:
  - create_table
  sql: |
    select
      c1, c2, c3 from t1
    where
      not(c1 > 1 or c2 > 2 or c3 > 3)
      and (c1 > 1 or c2 > 2)
      and (c2 > 2 or c3 > 3)
      and (c3 > 3 or c1 > 1)
      and (c1 > 1 or c2 > 2 or c3 > 3);
  expected_outputs:
  - logical_plan
  - batch_plan