- sql: |
    select generate_series('2'::INT,'10'::INT,'2'::INT);
  expected_outputs:
  - batch_plan
- sql: |
    select unnest(Array[1,2,3]);
  expected_outputs:
  - batch_plan
- sql: |
    select unnest(Array[Array[1,2,3], Array[4,5,6]]);
  expected_outputs:
  - batch_plan
- sql: |
    create table t(x int[]);
    select unnest(x) as unnest from t;
  expected_outputs:
  - stream_plan
  - batch_plan
- name: table functions used with usual expressions
  sql: |
    create table t(x int[]);
    select unnest(x), 1 from t;
  expected_outputs:
  - batch_plan
- name: multiple table functions
  sql: |
    create table t(x int[]);
    select unnest(x), unnest(Array[1,2]) from t;
  expected_outputs:
  - batch_plan
- name: table functions as parameters of usual functions
  sql: |
    create table t(x int);
    select -generate_series(x,x,x) from t;
  expected_outputs:
  - batch_plan
- name: table functions as parameters of usual functions
  sql: |
    create table t(x int[]);
    select unnest(x) * unnest(x) as a, unnest(x) as b from t;
  expected_outputs:
  - batch_plan
  - stream_plan
- name: table functions as parameters of table functions
  sql: |
    create table t(x int[]);
    select generate_series(unnest(x),100,1) from t;
  expected_outputs:
  - batch_plan
- name: issue-5284
  sql: |
    -- projected_row_id should be hidden in the output
    create table t(x int[]);
    select unnest(x) as unnest from t order by unnest limit 1;
  expected_outputs:
  - batch_plan
  - stream_plan
- name: issue-7812
  sql: |
    -- projected_row_id should be excluded from distinct
    create table t(x int[]);
    select distinct unnest(x) as unnest from t;
  expected_outputs:
  - batch_plan
  - stream_plan
- sql: |
    create table t(x int[]);
    select * from (select unnest(x) as unnest from t) where unnest > 1;
  expected_outputs:
  - batch_plan
  - stream_plan
- sql: |
    create table t(x int[]);
    select * from
      (select unnest(x) as unnest from t)
    NATURAL JOIN
      (select unnest(x) as unnest from t);
  expected_outputs:
  - batch_plan
  - stream_plan
# We should not prune table functions, because the final number of result rows is depended
# by all table function calls
# https://github.com/risingwavelabs/risingwave/issues/10080
- name: issue-10080
  sql: |
    with cte as (SELECT 1 as v1, unnest(array[1,2,3,4,5]) AS v2) select v1 from cte;
  expected_outputs:
  - batch_plan
  - stream_plan
- sql: |
    create table t(x int[]);
    with cte as (SELECT 1 as v1, unnest(x) AS v2 FROM t) select v1 from cte;
  expected_outputs:
  - batch_plan
  - stream_plan
- name: set-returning function disallowed in CASE WHEN
  sql: |
    with a(a1) as (values (array[2]), (null)) select case when a1 is not null then unnest(a1) end from a;
  expected_outputs:
  - binder_error
- name: set-returning function disallowed in COALESCE
  sql: |
    with a(a1) as (values (array[2]), (null)) select coalesce(unnest(a1), 0) from a;
  expected_outputs:
  - binder_error
- name: set-returning function disallowed in JOIN ON
  sql: |
    with a(a1) as (values (array[2]), (null)), b(b1) as (select 2) select a1 from a join b on unnest(a1) = b1;
  expected_outputs:
  - binder_error
- name: set-returning function disallowed in HAVING
  sql: |
    with a(a1) as (values (array[2]), (null)) select count(*) from a group by a1 having unnest(a1) < 5;
  expected_outputs:
  - binder_error
- name: set-returning function disallowed in FILTER
  sql: |
    with a(a1) as (values (array[2]), (null)) select count(*) filter(where unnest(a1) < 3) from a;
  expected_outputs:
  - binder_error
- name: set-returning function unsupported in GROUP BY yet
  sql: |
    with a(a1) as (values (array[2]), (null)) select count(*) from a group by unnest(a1);
  expected_outputs:
  - planner_error
