- sql: |
    create table t1 (id int, created_at date);
    select * from tumble(t1, created_at, interval '3' day);
  expected_outputs:
  - logical_plan
  - batch_plan
- sql: |
    create materialized view t as select * from s;
    select * from tumble(t, (country).created_at, interval '3' day);
  create_source:
    format: plain
    encode: protobuf
    name: s
    file: |
      syntax = "proto3";
      package test;
      message TestRecord {
        int32 id = 1;
        Country country = 3;
        int64 zipcode = 4;
        float rate = 5;
      }
      message Country {
        string address = 1;
        City city = 2;
        string zipcode = 3;
        string created_at = 4;
      }
      message City {
        string address = 1;
        string zipcode = 2;
      }
  expected_outputs:
  - binder_error
- sql: |
    create table t1 (id int, created_at varchar);
    select * from hop(t1, created_at, interval '2' day, interval '4' day);
  expected_outputs:
  - binder_error
- sql: |
    create table t1 (id int, created_at date);
    select * from hop(t1, created_at, interval '2' day, interval '3' day);
  expected_outputs:
  - planner_error
- sql: |
    create table t1 (id int, created_at date);
    select * from hop(t1, created_at, interval '-1' day, interval '1' day);
  expected_outputs:
  - planner_error
- sql: |
    create table t1 (id int, created_at date);
    select * from hop(t1, created_at, interval '0' day, interval '1' day);
  expected_outputs:
  - planner_error
- sql: |
    create table t1 (id int, created_at date);
    select * from hop(t1, created_at, interval '-1' day, interval '-1' day);
  expected_outputs:
  - planner_error
- sql: |
    create table t1 (id int, created_at date);
    select * from hop(t1, created_at, interval '1' day, interval '3' day);
  expected_outputs:
  - logical_plan
  - stream_plan
- sql: |
    create table t1 (id int, created_at date);
    select id, created_at, window_start from hop(t1, created_at, interval '1' day, interval '3' day);
  expected_outputs:
  - logical_plan
  - stream_plan
- sql: |
    create table t1 (id int, created_at date);
    select id, created_at, window_end from hop(t1, created_at, interval '1' day, interval '3' day);
  expected_outputs:
  - logical_plan
  - stream_plan
- sql: |
    create table t1 (id int, created_at date);
    select id, created_at from hop(t1, created_at, interval '1' day, interval '3' day);
  expected_outputs:
  - stream_plan
  - logical_plan
  - batch_plan
- sql: |
    create table t1 (id int, created_at date);
    select t_hop.id, t_hop.created_at from hop(t1, created_at, interval '1' day, interval '3' day) as t_hop;
  expected_outputs:
  - logical_plan
  - batch_plan
  - stream_plan
- sql: |
    create table t (v1 varchar, v2 timestamp, v3 float);
    select v1, window_end, avg(v3) as avg from hop( t, v2, interval '1' minute, interval '10' minute) group by v1, window_end;
  expected_outputs:
  - stream_plan
  - logical_plan
  - batch_plan
- sql: |
    create table t1 (id int, v1 int, created_at date);
    with t2 as (select * from t1 where v1 >= 10)
    select * from tumble(t2, created_at, interval '3' day);
  expected_outputs:
  - stream_plan
  - batch_plan
  - logical_plan
- sql: |
    create table t1 (id int, v1 int, created_at date);
    with t2 as (select * from t1 where v1 >= 10)
    select * from hop(t2, created_at, interval '1' day, interval '3' day);
  expected_outputs:
  - stream_plan
  - logical_plan
  - batch_plan
- sql: |
    with t(ts) as (values ('2020-01-01 12:00:00'::timestamp)) select * from tumble(t, ts, interval '10' second) as z;
  expected_outputs:
  - logical_plan
  - batch_plan
- sql: |
    create table t1 ( c1 varchar, c2 int, c3 timestamp);
    create table t2 ( d1 int, d2 varchar, d3 timestamp);
    create index idx_t1 on t1(c2) include (c1, c2, c3);
    select * from t2 inner join hop(t1,  c3, interval '10 minute',interval '20 minute')  on t2.d1 = t1.c2;
  expected_outputs:
  - logical_plan
  - batch_plan
  - optimized_logical_plan_for_batch
- sql: |
    create table t1 ( c1 varchar, c2 int, c3 timestamp);
    create table t2 ( d1 int, d2 varchar, d3 timestamp);
    create index idx_t1 on t1(c2) include (c1, c2, c3);
    select * from hop(t2,  d3, interval '10 minute',interval '20 minute') inner join hop(t1,  c3, interval '10 minute',interval '20 minute')  on t2.d1 = t1.c2;
  expected_outputs:
  - batch_plan
  - optimized_logical_plan_for_batch
  - logical_plan
- sql: |
    CREATE TABLE auction (id BIGINT, item_name CHARACTER VARYING, description CHARACTER VARYING, initial_bid BIGINT, reserve BIGINT, date_time TIMESTAMP, expires TIMESTAMP, seller BIGINT, category BIGINT, extra CHARACTER VARYING, PRIMARY KEY (id));
    CREATE TABLE nation (n_nationkey INT, n_name CHARACTER VARYING, n_regionkey INT, n_comment CHARACTER VARYING, PRIMARY KEY (n_nationkey));
    CREATE TABLE alltypes2 (c1 BOOLEAN, c2 SMALLINT, c3 INT, c4 BIGINT, c5 REAL, c6 DOUBLE, c7 NUMERIC, c8 DATE, c9 CHARACTER VARYING, c10 TIME, c11 TIMESTAMP, c13 INTERVAL, c14 STRUCT<a INT>, c15 INT[], c16 CHARACTER VARYING[]);
    SELECT ((CASE WHEN (hop_0.c2 = (32)) THEN TIMESTAMP '2022-07-29 15:06:36' WHEN hop_0.c1 THEN t_2.expires WHEN false THEN (t_2.expires + (INTERVAL '-18')) ELSE t_2.expires END) + (INTERVAL '87')) AS col_0, ((INT '618') % ((311))) AS col_1, (SMALLINT '35') AS col_2, ((coalesce(NULL, NULL, NULL, NULL, NULL, (INT '0'), NULL, NULL, NULL, NULL)) - hop_0.c7) AS col_3 FROM hop(alltypes2, alltypes2.c11, INTERVAL '3600', INTERVAL '144000') AS hop_0, nation AS t_1 JOIN auction AS t_2 ON t_1.n_name = t_2.item_name AND true WHERE (t_2.seller > ((CAST(((SMALLINT '62')) IN (hop_0.c2, hop_0.c2, hop_0.c2, (- hop_0.c2), hop_0.c2, hop_0.c2, hop_0.c2, (SMALLINT '-32768')) AS INT) | t_1.n_nationkey) + hop_0.c7)) GROUP BY t_2.description, hop_0.c7, t_2.category, t_2.item_name, hop_0.c15, hop_0.c2, hop_0.c1, hop_0.c9, t_2.expires, hop_0.c6;
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
