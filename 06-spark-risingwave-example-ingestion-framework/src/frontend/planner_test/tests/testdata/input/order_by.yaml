- name: desc
  sql: |
    create table t (v1 bigint, v2 double precision);
    select * from t order by v1 desc;
  expected_outputs:
  - stream_plan
  - batch_plan
- name: output names are not qualified after table names
  sql: |
    create table t (v1 bigint, v2 double precision);
    select t.* from t order by v1;
  expected_outputs:
  - batch_plan
- sql: |
    create table t (v1 bigint, v2 double precision);
    select v1, v1+1 from t order by v1;
  expected_outputs:
  - batch_plan
- sql: |
    create table t (v1 bigint, v2 double precision);
    select t.v1 from t order by v1;
  expected_outputs:
  - batch_plan
- name: order by output alias
  sql: |
    create table t (v1 bigint, v2 double precision);
    select v1 as a1 from t order by a1;
  expected_outputs:
  - batch_plan
- name: order by ambiguous
  sql: |
    create table t (v1 bigint, v2 double precision);
    select v1 as a, v2 as a from t order by a;
  expected_outputs:
  - binder_error
- name: ambiguous output name is okay as long as not used in order by
  sql: |
    create table t (v1 bigint, v2 double precision);
    select v1 as a, v2 as a from t order by 2;
  expected_outputs:
  - batch_plan
- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from t order by 1+1;
  expected_outputs:
  - stream_plan
  - batch_plan
- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from t order by v;
  expected_outputs:
  - binder_error
- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from t order by v1 desc limit 5;
  expected_outputs:
  - stream_plan
  - batch_plan
- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from t limit 3 offset 4;
  expected_outputs:
  - batch_plan
- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from t limit 5;
  expected_outputs:
  - batch_plan
- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from t order by v1 desc limit 5 offset 7;
  expected_outputs:
  - stream_plan
  - batch_plan
- name: order by expression that would be valid in select list
  sql: |
    create table t (x int, y int, z int);
    select x, y from t order by x + y, z;
  expected_outputs:
  - optimized_logical_plan_for_batch
  - stream_plan
  - batch_plan
- name: order by the number of an output column
  sql: |
    create table t (x int, y int);
    select x, y from t order by 2;
  expected_outputs:
  - batch_plan
  - optimized_logical_plan_for_batch
- name: index exceeds the number of select items
  sql: |
    create table t (x int, y int);
    select x from t order by 2;
  expected_outputs:
  - binder_error
- name: an output column name cannot be used in an expression
  sql: |
    create table t (x int, y int);
    select x + y as sum from t order by sum + 1;
  expected_outputs:
  - binder_error
- name: select distinct with order by expressions not appear in select list
  sql: |
    create table t (x int, y int);
    select distinct x from t order by y;
  expected_outputs:
  - planner_error
- name: No BatchSort needed, when input is already sorted
  sql: |
    create table t(v int);
    create materialized view mv as select * from t order by v asc;
    select * from mv order by v asc;
  expected_outputs:
  - batch_plan
- name: BatchSort needed, when input is sorted in wrong order
  sql: |
    create table t(v int);
    create materialized view mv as select * from t order by v asc;
    select * from mv order by v desc;
  expected_outputs:
  - batch_plan
- name: No BatchSort needed, when input is already sorted
  sql: |
    create table t(v int);
    create materialized view mv as select * from t order by v desc;
    select * from mv order by v desc;
  expected_outputs:
  - batch_plan
- name: BatchSort needed, because our BatchScan can not get a ordered result when scan from ranges
  sql: |
    create table t(v int);
    create materialized view mv as select * from t order by v asc;
    select * from mv where v = 1 or v = 2 order by v asc;
  expected_outputs:
  - batch_plan
- name: BatchSort needed, when input is sorted in wrong order
  sql: |
    create table t(v int);
    create materialized view mv as select * from t order by v desc;
    select * from mv order by v asc;
  expected_outputs:
  - batch_plan
- sql: |
    CREATE TABLE test (a INTEGER, b INTEGER);
    SELECT b % 2 AS f, SUM(a) FROM test GROUP BY b % 2 ORDER BY f;
  expected_outputs:
  - batch_plan
- name: Orderby with always-false predicate
  sql: |
    create table t1 (v1 int);
    select
        1 as col_0
    from
        t1 as t_0
    where
        false
    group by
        t_0.v1
    order by
        t_0.v1 asc;
  expected_outputs:
  - batch_plan
- name: distinct on order by
  sql: |
    create table t (x int, y int);
    select distinct on(x) x,y from t order by x,y;
  expected_outputs:
  - batch_plan
- name: distinct on order by in cte
  sql: |
    create table t (x int, y int);
    with cte as (select distinct on(x) x,y from t order by x,y) select * from cte;
  expected_outputs:
  - batch_plan
