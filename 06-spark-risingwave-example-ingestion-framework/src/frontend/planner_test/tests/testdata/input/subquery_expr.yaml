- sql: |
    select (select 1);
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
- sql: |
    create table t(x int);
    select (select x from t) a, 1 b from t;
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
  - batch_plan
  - stream_error
- sql: |
    create table t(x int);
    select (select x from t limit 1), 1 from t;
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
- sql: |
    create table t(x int);
    select (select x from t order by x limit 1), 1 from t;
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
- sql: |
    create table t(x int);
    select (select x from t order by x fetch next 1 rows with ties) a, 1 b from t;
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
  - batch_plan
  - stream_error
- sql: |
    create table t(x int);
    select (select x from t) + 1 a from t;
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
  - batch_plan
  - stream_error
- sql: |
    create table t(x int);
    select (select x from t) a, (select 1) b;
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
  - batch_plan
  - stream_error
- sql: |
    create table t(x int);
    select x + (select x + (select x as v1 from t) as v2 from t) as v3 from t;
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
  - batch_plan
  - stream_error
- sql: |
    create table t1 (x int, y int);
    create table t2 (x int, y int);
    select t1.x, (select y from (select y from t2 order by y desc limit 1 offset 3) t2 limit 2) from t1;
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    select (select 1, 2);
  expected_outputs:
  - binder_error
- sql: |
    create table t(x int);
    select 1 where exists (select * from t);
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
- sql: |
    create table t(x int);
    select 1 where not exists (select * from t);
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
- sql: |
    create table t1(x int);
    create table t2(x int);
    select x from t1 where exists (select x from t2);
  expected_outputs:
  - logical_plan
- sql: |
    create table t(x int);
    select x from t where exists (select * from t);
  expected_outputs:
  - logical_plan
- sql: |
    create table t1(x int);
    create table t2(x int);
    select x from t1 where x > (select x from t2)
  expected_outputs:
  - logical_plan
- sql: |
    select 1 where 1>0 and exists (values (1))
  expected_outputs:
  - logical_plan
- sql: |
    select 1 where (not exists (values (1))) and (1>0 or exists (values (1)))
  expected_outputs:
  - logical_plan
- sql: |
    select a + 1, b::varchar, c from (values (1, 2, 3), (4, 5, 6)) t(a, b, c);
  expected_outputs:
  - logical_plan
- sql: |
    select sum(a), max(b + c + 10), string_agg(c::varchar || '~', ',') from (values (1, 2, 3), (4, 5, 6)) as t(a, b, c);
  expected_outputs:
  - logical_plan
- sql: |
    select 1 + (select 2 from t);
  expected_outputs:
  - binder_error
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select x from t1 where y in (select y from t2);
  expected_outputs:
  - logical_plan
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select x from t1 where y not in (select y from t2);
  expected_outputs:
  - logical_plan
- sql: |
    create table t1 (a int);
    create table t2 (b int);
    SELECT *
    FROM t1
    WHERE EXISTS
    (SELECT 1
    FROM t2
    GROUP BY a
    ORDER BY a DESC LIMIT 90);
  expected_outputs:
    - logical_plan
    - batch_plan
- sql: |
    create table b (b1 varchar);
    select * from  b cross join repeat(b1, 2);
  expected_outputs:
    - logical_plan
    - batch_plan
- sql: |
    create table t (a int);
    create table dl(c1 int, c2 int);
    create table di(d1 int, d2 int);
    select (select 1 from t,di where t.a = dl.c1 limit 1) name, (select 1 from t, di where t.a = dl.c2 limit 1) name2 from dl;
  expected_outputs:
    - logical_plan

