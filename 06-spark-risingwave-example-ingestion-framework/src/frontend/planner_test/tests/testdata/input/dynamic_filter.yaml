- id: create_tables
  sql: |
    create table t1 (v1 int);
    create table t2 (v2 int);
  expected_outputs: []
- name: With Simple Agg on inner side
  before:
  - create_tables
  sql: |
    with max_v2 as (select max(v2) max from t2) select v1 from t1, max_v2 where v1 > max;
  expected_outputs:
  - optimized_logical_plan_for_stream
  - stream_plan
- name: |
    With Top-1 on inner side
    TODO: currently not possible due to https://github.com/risingwavelabs/risingwave/issues/5764
  before:
  - create_tables
  sql: |
    with max_v2 as (select v2 max from t2 order by v2 desc limit 1) select v1 from t1, max_v2 where v1 > max;
  expected_outputs:
  - optimized_logical_plan_for_stream
  - stream_error
- name: With Simple Agg upstream materialized view on inner side
  before:
  - create_tables
  sql: |
    create materialized view max_v2 as select max(v2) max from t2;
    select v1 from t1, max_v2 where v1 > max;
  expected_outputs:
  - optimized_logical_plan_for_stream
  - stream_plan
- name: |
    Output indices of Dynamic Filter
    TODO: currently implemented by adding a Project, https://github.com/risingwavelabs/risingwave/issues/3419
  before:
  - create_tables
  sql: |
    with max_v2 as (select max(v2) max from t2) select v1 from t1, max_v2 where v1 + v1 > max;
  expected_outputs:
  - optimized_logical_plan_for_stream
  - stream_plan
- name: Ensure error on multiple rows on inner side
  before:
  - create_tables
  sql: |
    with max_v2 as (select v2 max from t2 order by v2 desc limit 2) select v1 from t1, max_v2 where v1 > max;
  expected_outputs:
  - stream_error
  - optimized_logical_plan_for_stream
- name: Ensure error on output columns from inner
  before:
  - create_tables
  sql: |
    with max_v2 as (select max(v2) max from t2) select v1, max from t1, max_v2 where v1 > max;
  expected_outputs:
  - optimized_logical_plan_for_stream
  - stream_error
- name: Use Inner Join for equi condition
  before:
  - create_tables
  sql: |
    with max_v2 as (select max(v2) max from t2) select v1, max from t1, max_v2 where v1 = max;
  expected_outputs:
  - optimized_logical_plan_for_stream
  - stream_plan
- name: Dynamic filter join on unequal types
  sql: |
    create table t1 (v1 int);
    create table t2 (v2 bigint);
    with max_v2 as (select max(v2) max from t2) select v1 from t1, max_v2 where v1 > max;
  expected_outputs:
  - stream_plan
  - optimized_logical_plan_for_stream
- name: Dynamic filter on semi join
  sql: |
    create table t1 (v1 int);
    create table t2 (v2 int);
    with max_v2 as (select max(v2) max from t2) select v1 from t1 where exists (select * from max_v2 where v1 > max);
  expected_outputs:
  - stream_plan
- name: Complex expression on RHS of condition will still result in dynamic filter
  before:
  - create_tables
  sql: |
    with max_v2 as (select max(v2) max from t2) select v1 from t1, max_v2 where v1 > 2 * max;
  expected_outputs:
  - stream_plan
  - optimized_logical_plan_for_stream
- name: two predicate on the same subquery
  before:
  - create_tables
  sql: |
    with cte as (select max(v2) max from t2) select * from t1 where v1 > (select max from cte) AND v1 < (select max+5 from cte);
  expected_outputs:
  - stream_plan
  - optimized_logical_plan_for_stream
