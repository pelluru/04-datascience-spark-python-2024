- sql: |
    create table t(c STRUCT<x INTEGER, y INTEGER>);
    select t.c.x from t
  expected_outputs:
  - binder_error
- sql: |
    create table t(c STRUCT<x INTEGER, y INTEGER>);
    select (t.c).x from t
  expected_outputs:
  - logical_plan
- sql: |
    create table t(c STRUCT<x INTEGER, y INTEGER>);
    select (c).x from t
  expected_outputs:
  - logical_plan
- sql: |
    create table t(c STRUCT<x INTEGER, y INTEGER>);
    -- select (t).c.x from t
    select (t.c).x from t
  expected_outputs:
  - logical_plan
- sql: |
    create table t(c STRUCT<x INTEGER, y INTEGER>);
    select (t.c).* from t
  expected_outputs:
  - logical_plan
- sql: |
    create table t(c STRUCT<x INTEGER, y INTEGER>);
    select (c).* from t
  expected_outputs:
  - logical_plan
- sql: |
    create table t(c STRUCT<x INTEGER, y INTEGER>);
    -- select (t).c.* from t
    select (t.c).* from t
  expected_outputs:
  - logical_plan
- sql: |
    create table t1(c STRUCT<x INTEGER, y INTEGER>);
    create table t2(c STRUCT<x INTEGER, y INTEGER>);
    select (c).x from t1 cross join t2;
  expected_outputs:
  - binder_error
- sql: |
    create table t1(c STRUCT<x INTEGER, y INTEGER>);
    create table t2(c STRUCT<x INTEGER, y INTEGER>);
    -- select * from t1 where exists(select * from t2 where (c).y = 100 and (t1.c).x = (t2).c.x and (c).x = 1000 and (t1).c.y = (t2.c).y);
    select * from t1 where exists(select * from t2 where (c).y = 100 and (t1.c).x = (t2.c).x and (c).x = 1000 and (t1.c).y = (t2.c).y);
  expected_outputs:
  - logical_plan
- sql: |
    create schema s;
    create table s.t(a STRUCT<b INTEGER, c INTEGER>);
    select s.t.a from s.t;
  expected_outputs:
  - logical_plan
- sql: |
    create schema s;
    create table s.t(a STRUCT<b INTEGER, c INTEGER>);
    select (s.t.a).b from s.t;
  expected_outputs:
  - logical_plan
- sql: |
    create schema s;
    create table s.t(a STRUCT<b INTEGER, c INTEGER>);
    -- select (s.t).a.b from s.t;
    select (s.t.a).b from s.t;
  expected_outputs:
  - logical_plan
- sql: |
    create schema s;
    create table s.t(a STRUCT<b INTEGER, c INTEGER>);
    -- select ((s.t).a).b from s.t;
    select (s.t.a).b from s.t;
  expected_outputs:
  - logical_plan
- sql: |
    create schema s;
    create table s.t(a STRUCT<b INTEGER, c INTEGER>);
    -- select (s.t).a.* from s.t;
    select (s.t.a).* from s.t;
  expected_outputs:
  - logical_plan
- sql: |
    create schema s;
    create table s.t(a STRUCT<b INTEGER, c INTEGER>);
    -- select ((s.t).a).* from s.t;
    select (s.t.a).* from s.t;
  expected_outputs:
  - logical_plan
- sql: |
    create schema t;
    create table t.t(t STRUCT<t INTEGER>);
    select (t.t.t).t from t.t;
  expected_outputs:
  - logical_plan
- sql: |
    create schema t;
    create table t.t(t STRUCT<t STRUCT<t INTEGER>>);
    select (t.t.t).t.t from t.t;
  expected_outputs:
  - logical_plan
- sql: |
    create table t(c STRUCT<x INTEGER, y INTEGER>[]);
    select (c[1]).x from t
  expected_outputs:
  - logical_plan
- sql: |
    create table t(c STRUCT<x INTEGER, y INTEGER>);
    select (case when true then c end).x from t
  expected_outputs:
  - logical_plan
