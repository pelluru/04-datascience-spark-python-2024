- sql: |
    create table t (a int, b int);
    create table t2 (c int, d int);
    create index idx on t2(d) include (c);
    select * from t join t2 on t.b = t2.d;
  expected_outputs:
  - batch_plan
- sql: |
    create table t (a int, b int);
    create table t2 (c int, d int);
    create index idx on t2(d) include (c);
    create index idx2 on t2(c, d);
    create index idx3 on t2(c) include(d);
    select * from t join t2 on t.a = t2.c and t.b = t2.d;
  expected_outputs:
  - batch_plan
- sql: |
    create table t (a int, b int);
    create table t2 (c int, d int);
    create index idx on t2(d) include (c);
    select * from t join t2 on t.b = t2.d;
  expected_outputs:
  - batch_plan
- name: test index join predicate reorder
  sql: |
    create table t (a int, b int);
    create table t2 (c int, d int);
    create index idx on t2(c, d);
    select * from t join t2 on t.b = t2.d and t.a = t2.c;
  expected_outputs:
  - batch_plan
- name: test index join prefix lookup
  sql: |
    create table t (a int, b int);
    create table t2 (c int, d int);
    create index idx on t2(c, d) distributed by (c);
    select * from t join t2 on t.a = t2.c;
  expected_outputs:
  - batch_plan
- name: test index join distribution derive
  sql: |
    create table t (a int, b int);
    create table t2 (c int, d int, primary key(c));
    select t2.c, t2.d, count(distinct t.a) from t join t2 on t.a = t2.c group by t2.c, t2.d;
  expected_outputs:
  - batch_plan
- sql: |
    create table t1 (a int, b int);
    create table t2 (c int, d int);
    create index idx on t2(c) include (d);
    select * from t1 join idx on t1.a = idx.c and t1.b = idx.d;
  expected_outputs:
  - batch_plan
- name: shouldn't be a lookup join
  sql: |
    create table t(a int, b int);
    create index idx on t(a, b) distributed by (a);
    select * from t t1 join t t2 on t1.b = t2.b;
  expected_outputs:
  - batch_plan
