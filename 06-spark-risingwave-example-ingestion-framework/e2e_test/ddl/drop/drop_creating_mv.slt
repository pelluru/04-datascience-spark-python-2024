statement ok
create table t(v1 int);

statement ok
insert into t select * from generate_series(1, 10000);

statement ok
flush;

statement ok
set backfill_rate_limit=1;

############## Test drop foreground mv
onlyif can-use-recover
system ok
risedev psql -c 'create materialized view m1 as select * from t;' &

onlyif can-use-recover
sleep 5s

onlyif can-use-recover
query I
select background_ddl from rw_catalog.rw_materialized_views where name='m1';
----
f

onlyif can-use-recover
statement ok
drop materialized view m1;

############## Test drop background mv BEFORE recovery

statement ok
set background_ddl=true;

onlyif can-use-recover
statement ok
create materialized view m1 as select * from t;

onlyif can-use-recover
sleep 5s

onlyif can-use-recover
query I
select background_ddl from rw_catalog.rw_materialized_views where name='m1';
----
t

onlyif can-use-recover
statement ok
drop materialized view m1;

############## Test drop background mv AFTER recovery
statement ok
set background_ddl=true;

onlyif can-use-recover
statement ok
create materialized view m1 as select * from t;

onlyif can-use-recover
sleep 5s

onlyif can-use-recover
query I
select background_ddl from rw_catalog.rw_materialized_views where name='m1';
----
t

onlyif can-use-recover
statement ok
recover;

onlyif can-use-recover
sleep 5s

onlyif can-use-recover
query I
select background_ddl from rw_catalog.rw_materialized_views where name='m1';
----
t

onlyif can-use-recover
statement ok
drop materialized view m1;

############## Make sure the mv can still be successfully created later.
statement ok
set backfill_rate_limit=default;

statement ok
set background_ddl=false;

statement ok
create materialized view m1 as select * from t;

query I
select background_ddl from rw_catalog.rw_materialized_views where name='m1';
----
f

statement ok
drop materialized view m1;

statement ok
drop table t;