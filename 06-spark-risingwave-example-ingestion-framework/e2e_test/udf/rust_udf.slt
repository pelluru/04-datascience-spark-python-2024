statement ok
create function int_42() returns int language rust as $$
    fn int_42() -> i32 {
        42
    }
$$;

query I
select int_42();
----
42

statement ok
drop function int_42;


statement ok
create function gcd(int, int) returns int language rust as $$
    fn gcd(mut a: i32, mut b: i32) -> i32 {
        while b != 0 {
            (a, b) = (b, a % b);
        }
        a
    }
$$;

query I
select gcd(25, 15);
----
5

statement ok
drop function gcd;

statement ok
create function decimal_add(a decimal, b decimal) returns decimal language rust as $$
    fn decimal_add(a: Decimal, b: Decimal) -> Decimal {
        a + b
    }
$$;

query R
select decimal_add(1.11, 2.22);
----
3.33

statement ok
drop function decimal_add;

statement ok
create function datetime(d date, t time) returns timestamp language rust as $$
    fn datetime(date: NaiveDate, time: NaiveTime) -> NaiveDateTime {
        NaiveDateTime::new(date, time)
    }
$$;

query T
select datetime('2020-01-01', '12:34:56');
----
2020-01-01 12:34:56

statement ok
drop function datetime;

statement ok
create function jsonb_access(json jsonb, index int) returns jsonb language rust as $$
    fn jsonb_access(json: serde_json::Value, index: i32) -> Option<serde_json::Value> {
        json.get(index as usize).cloned()
    }
$$;

query T
select jsonb_access(a::jsonb, 1) from
(values ('["a", "b", "c"]'), (null), ('[0, false]')) t(a);
----
"b"
NULL
false

statement ok
drop function jsonb_access;


statement ok
create function key_value(varchar) returns struct<key varchar, value varchar> language rust as $$
    #[derive(StructType)]
    struct KeyValue<'a> {
        key: &'a str,
        value: &'a str,
    }
    #[function("key_value(varchar) -> struct KeyValue")]
    fn key_value(kv: &str) -> Option<KeyValue<'_>> {
        let (key, value) = kv.split_once('=')?;
        Some(KeyValue { key, value })
    }
$$;

query T
select key_value('a=1');
----
(a,1)

statement ok
drop function key_value;


statement ok
create function key_values(varchar) returns table (Key varchar, Value varchar) language rust as $$
    #[derive(StructType)]
    struct KeyValue<'a> {
        // note that field names are case-insensitive
        key: &'a str,
        value: &'a str,
    }
    #[function("key_values(varchar) -> setof struct KeyValue")]
    fn key_values(kv: &str) -> impl Iterator<Item = KeyValue<'_>> {
        kv.split(',').filter_map(|kv| {
            kv.split_once('=')
                .map(|(key, value)| KeyValue { key, value })
        })
    }
$$;

query T
select * from key_values('a=1,b=2');
----
a 1
b 2

statement ok
drop function key_values;


statement ok
create function series(n int) returns table (x int) language rust as $$
    fn series(n: i32) -> impl Iterator<Item = i32> {
        (0..n).into_iter()
    }
$$;

query I
select series(3);
----
0
1
2

statement ok
drop function series;


statement ok
create function sum_array(integer[]) returns integer language rust as $$
    fn sum_array(xs: &[i32]) -> i32 {
        xs.iter().sum()
    }
$$;

query I
select sum_array(array[1, 2, 3]);
----
6

statement ok
drop function sum_array;


# XXX: this test is disabled in CI because it prints "panicked at" which makes the test fail
# statement ok
# create function panic() returns int language rust as $$
#     fn panic() -> i32 {
#         panic!("gg")
#     }
# $$;
#
# # panic message should be included in the error message
# query error gg
# select panic();
#
# statement ok
# drop function panic;
