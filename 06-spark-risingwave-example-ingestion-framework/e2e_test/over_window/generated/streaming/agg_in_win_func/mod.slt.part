# This file is generated by `gen.py`. Do not edit it manually!

# Test aggregate function calls as window function args/PARTITION BY/ORDER BY.

statement ok
create table t (
      id int
    , p1 int
    , p2 int
    , time int
    , v1 int
    , v2 int
);

statement ok
create materialized view v as
select
    p1, p2
    , row_number() over (partition by p1 order by p2) as out1
    , sum(sum(v2)) over (partition by p1, avg(time) order by max(v1), p2) as out2
from t
group by p1, p2;

statement ok
insert into t values
  (100001, 100, 200, 1, 701, 805)
, (100002, 100, 200, 2, 700, 806)
, (100003, 100, 208, 2, 723, 807)
, (100004, 103, 200, 2, 702, 808);

query iiii
select * from v order by p1, p2;
----
100  200  1  1611
100  208  2   807
103  200  1   808

statement ok
insert into t values
  (100005, 100, 200, 3, 717, 810)
, (100006, 105, 204, 5, 703, 828);

query iiii
select * from v order by p1, p2;
----
100  200  1  2421
100  208  2  3228
103  200  1   808
105  204  1   828

statement ok
update t set v1 = 799 where id = 100002; -- value change

statement ok
update t set p2 = 200 where id = 100003; -- partition change

statement ok
update t set "time" = 1 where id = 100005; -- order change

query iiiiiii
select * from v order by p1, p2;
----
100  200  1  3228
103  200  1   808
105  204  1   828

statement ok
delete from t where time = 2;

query iiii
select * from v order by p1, p2;
----
100  200  1  1615
105  204  1   828

statement ok
drop materialized view v;

statement ok
drop table t;
