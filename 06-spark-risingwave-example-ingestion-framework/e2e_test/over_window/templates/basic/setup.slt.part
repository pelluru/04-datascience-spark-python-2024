statement ok
create table t (
      id int
    , p1 int
    , p2 int
    , time int
    , v1 int
    , v2 int
);

# simple and basic `first_value` call
statement ok
create $view_type v_a as
select
    *
    , first_value(v1) over (partition by p1, p2 order by time, id rows 3 preceding) as out1
from t;

# multiple aggregate calls with unbounded frames
statement ok
create $view_type v_b as
select
    *
    , avg(v1) over (partition by p1) as out2
    , sum(v1) over (partition by p1, p2 order by time, id rows between unbounded preceding and current row) as out3
    , min(v1) over (partition by p1, p2 order by time, id rows between current row and unbounded following) as out4
from t;

# lag and lead
statement ok
create $view_type v_c as
select
    *
    , lag(v1, 0) over (partition by p1 order by id) as out5
    , lag(v1, 1) over (partition by p1, p2 order by id) as out6
    , lag(v1) over (partition by p1, p2 order by time, id) as out7
    , lead(v2, 1) over (partition by p1, p2 order by time, id) as out8
    , lead(v2, 2) over (partition by p1, p2 order by v1, v2) as out9
from t;

# range frame
statement ok
create $view_type v_d as
select
    *
    , last_value(time) over (partition by p1 order by time desc range between current row and 2 following) as out10
    , sum(v1) over (partition by p1 order by time range between 1 preceding and 1 following) as out11
from t;

statement ok
create $view_type v_a_b as
select
    *
    , first_value(v1) over (partition by p1, p2 order by time, id rows 3 preceding) as out1
    , sum(v1) over (partition by p1, p2 order by time, id rows between unbounded preceding and current row) as out3
    , min(v1) over (partition by p1, p2 order by time, id rows between current row and unbounded following) as out4
from t;

statement ok
create $view_type v_a_c as
select
    *
    , first_value(v1) over (partition by p1, p2 order by time, id rows 3 preceding) as out1
    , lag(v1) over (partition by p1, p2 order by time, id) as out7
    , lead(v2, 1) over (partition by p1, p2 order by time, id) as out8
    , lead(v2, 2) over (partition by p1, p2 order by v1, v2) as out9
from t;

statement ok
create $view_type v_a_d as
select
    *
    , first_value(v1) over (partition by p1, p2 order by time, id rows 3 preceding) as out1
    , last_value(time) over (partition by p1 order by time desc range between current row and 2 following) as out10
    , sum(v1) over (partition by p1 order by time range between 1 preceding and 1 following) as out11
from t;

statement ok
create $view_type v_b_c as
select
    *
    , sum(v1) over (partition by p1, p2 order by time, id rows between unbounded preceding and current row) as out3
    , min(v1) over (partition by p1, p2 order by time, id rows between current row and unbounded following) as out4
    , lag(v1) over (partition by p1, p2 order by time, id) as out7
    , lead(v2, 1) over (partition by p1, p2 order by time, id) as out8
    , lead(v2, 2) over (partition by p1, p2 order by v1, v2) as out9
from t;

statement ok
create $view_type v_b_d as
select
    *
    , sum(v1) over (partition by p1, p2 order by time, id rows between unbounded preceding and current row) as out3
    , min(v1) over (partition by p1, p2 order by time, id rows between current row and unbounded following) as out4
    , last_value(time) over (partition by p1 order by time desc range between current row and 2 following) as out10
    , sum(v1) over (partition by p1 order by time range between 1 preceding and 1 following) as out11
from t;

statement ok
create $view_type v_c_d as
select
    *
    , lag(v1) over (partition by p1, p2 order by time, id) as out7
    , lead(v2, 1) over (partition by p1, p2 order by time, id) as out8
    , lead(v2, 2) over (partition by p1, p2 order by v1, v2) as out9
    , last_value(time) over (partition by p1 order by time desc range between current row and 2 following) as out10
    , sum(v1) over (partition by p1 order by time range between 1 preceding and 1 following) as out11
from t;

statement ok
create $view_type v_a_b_c as
select
    *
    , first_value(v1) over (partition by p1, p2 order by time, id rows 3 preceding) as out1
    , avg(v1) over (partition by p1) as out2
    , sum(v1) over (partition by p1, p2 order by time, id rows between unbounded preceding and current row) as out3
    , min(v1) over (partition by p1, p2 order by time, id rows between current row and unbounded following) as out4
    , lag(v1, 0) over (partition by p1 order by id) as out5
    , lag(v1, 1) over (partition by p1, p2 order by id) as out6
    , lag(v1) over (partition by p1, p2 order by time, id) as out7
    , lead(v2, 1) over (partition by p1, p2 order by time, id) as out8
    , lead(v2, 2) over (partition by p1, p2 order by v1, v2) as out9
from t;

statement ok
create $view_type v_a_b_c_d as
select
    *
    , first_value(v1) over (partition by p1, p2 order by time, id rows 3 preceding) as out1
    , avg(v1) over (partition by p1) as out2
    , sum(v1) over (partition by p1, p2 order by time, id rows between unbounded preceding and current row) as out3
    , min(v1) over (partition by p1, p2 order by time, id rows between current row and unbounded following) as out4
    , lag(v1, 0) over (partition by p1 order by id) as out5
    , lag(v1, 1) over (partition by p1, p2 order by id) as out6
    , lag(v1) over (partition by p1, p2 order by time, id) as out7
    , lead(v2, 1) over (partition by p1, p2 order by time, id) as out8
    , lead(v2, 2) over (partition by p1, p2 order by v1, v2) as out9
    , last_value(time) over (partition by p1 order by time desc range between current row and 2 following) as out10
    , sum(v1) over (partition by p1 order by time range between 1 preceding and 1 following) as out11
from t;
